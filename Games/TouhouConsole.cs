using Cosmos.Core;
using System;
using System.IO;
using TerminalOSv1.Utils;

namespace TerminalOSv1.Games
{
    // vga mode identifiers

    #region Cosmos.Image
    public class VGAImage
    {
        // properties
        public int Width { get; private set; }
        public int Height { get; private set; }
        public byte[] Data { get; private set; }

        // constructor - new
        public VGAImage(int w, int h)
        {
            this.Width = w;
            this.Height = h;
            this.Data = new byte[w * h];
        }

        // constructor - load
        public VGAImage(string file)
        {
            this.FromFile(file);
        }

        // set data
        public void LoadData(int w, int h, byte[] data)
        {
            this.Width = w;
            this.Height = h;
            this.Data = data;
        }

        // load from file system
        public bool FromFile(string file)
        {
            if (File.Exists(file))
            {
                byte[] data = File.ReadAllBytes(file);
                return ParseData(data);
            }
            else { return false; }
        }

        // shrink image by multiple
        public void Shrink(int mult)
        {
            byte[] data = new byte[(Width * Height) / mult];
            for (int yy = 0; yy < Height; yy++)
            {
                int yyScaled = yy / mult;
                for (int xx = 0; xx < Width; xx++)
                {
                    int xxScaled = xx / mult;
                    data[(xxScaled + (yyScaled * (Width / mult)))] = Data[xx + (yy * Width)];
                }
            }

            this.Width = (int)(Width / mult);
            this.Height = (int)(Height / mult);
            this.Data = data;
        }

        // expand image by multiple
        public void Expand(int mult)
        {
            byte[] data = new byte[(Width * Height) * mult];
            for (int yy = 0; yy < Height; yy++)
            {
                int yyScaled = yy * mult;
                for (int xx = 0; xx < Width; xx++)
                {
                    int xxScaled = xx * mult;
                    data[(xxScaled + (yyScaled * (Width * mult)))] = Data[xx + (yy * Width)];
                }
            }

            this.Width = (int)(Width * mult);
            this.Height = (int)(Height * mult);
            this.Data = data;
        }

        // parse data
        public bool ParseData(byte[] data)
        {
            // valid file
            if (data.Length > 4)
            {
                Width = (ushort)((data[0] << 8) | data[1]);
                Height = (ushort)((data[2] << 8) | data[3]);
                this.Data = new byte[Width * Height];
                // pixel count is valid
                if (data.Length - 4 == Width * Height)
                {
                    // loop through data
                    for (int i = 0; i < Width * Height; i++)
                    {
                        // copy data(4 is width and height offset)
                        Data[i] = data[i + 4];
                    }
                    return true;
                }
                // pixel count doesn't match image size
                else { return false; }
            }
            // invalid file type - too small
            else { return false; }
        }
    }
    #endregion

    #region Cosmos.Graphics.VGADriver
    public enum VGAMode
    {
        Text80x25,
        Text80x50,
        Text90x60,
        Pixel320x200,
        Pixel320x200DB,
    }

    // vga mode register dumps
    public static class VGAModeRegisters
    {
        // text 80x25
        public static byte[] Mode80x25_Text = new byte[]
        {
			/* MISC */
			0x67,
			/* SEQ */
			0x03, 0x00, 0x03, 0x00, 0x02,
			/* CRTC */
			0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F,
            0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x50,
            0x9C, 0x0E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3,
            0xFF,
			/* GC */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
            0xFF,
			/* AC */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x0C, 0x00, 0x0F, 0x08, 0x00
        };

        // text 80x50
        public static byte[] Mode80x50_Text = new byte[]
        {
			/* MISC */
			0x67,
			/* SEQ */
			0x03, 0x00, 0x03, 0x00, 0x02,
			/* CRTC */
			0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F,
            0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x01, 0x40,
            0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3,
            0xFF, 
			/* GC */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
            0xFF, 
			/* AC */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x0C, 0x00, 0x0F, 0x08, 0x00,
        };

        // text 90x60
        public static byte[] Mode90x60_Text = new byte[]
        {
			/* MISC */
			0xE7,
			/* SEQ */
			0x03, 0x01, 0x03, 0x00, 0x02,
			/* CRTC */
			0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E,
            0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
            0xEA, 0x0C, 0xDF, 0x2D, 0x08, 0xE8, 0x05, 0xA3,
            0xFF,
			/* GC */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
            0xFF,
			/* AC */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x0C, 0x00, 0x0F, 0x08, 0x00,
        };

        // pixel 320x200x256
        public static byte[] Mode320x200x256_Pixel = new byte[]
        {
			/* MISC */
			0x63,
			/* SEQ */
			0x03, 0x01, 0x0F, 0x00, 0x0E,
			/* CRTC */
			0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F,
            0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x9C, 0x0E, 0x8F, 0x28, 0x40, 0x96, 0xB9, 0xA3,
            0xFF,
			/* GC */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
            0xFF,
			/* AC */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x41, 0x00, 0x0F, 0x00, 0x00
        };
    }

    // vga controller class
    public static unsafe class VGADriverII
    {
        // data ports
        private static readonly IOPort PORT_SEQ_DATA = new IOPort(0x3C5);
        private static readonly IOPort PORT_GC_DATA = new IOPort(0x3CF);
        private static readonly IOPort PORT_CRTC_DATA = new IOPort(0x3D5);
        private static readonly IOPort PORT_MASK_DATA = new IOPort(0x3DA);
        private static readonly IOPort PORT_DAC_DATA = new IOPort(0x3C9);

        // write ports
        private static readonly IOPortWrite PORT_AC_WRITE = new IOPortWrite(0x3C0);
        private static readonly IOPortWrite PORT_MISC_WRITE = new IOPortWrite(0x3C2);
        private static readonly IOPortWrite PORT_SEQ_WRITE = new IOPortWrite(0x3C4);
        private static readonly IOPortWrite PORT_DAC_WRITE = new IOPortWrite(0x3C8);
        private static readonly IOPortWrite PORT_GC_WRITE = new IOPortWrite(0x3CE);
        private static readonly IOPortWrite PORT_CRTC_WRITE = new IOPortWrite(0x3D4);

        // read ports
        private static readonly IOPortRead PORT_AC_READ = new IOPortRead(0x3C1);
        private static readonly IOPortRead PORT_DAC_READ = new IOPortRead(0x3C7);
        private static readonly IOPortRead PORT_INSTAT_READ = new IOPortRead(0x3DA);

        // mode properties
        public static ushort Width { get; private set; }
        public static ushort Height { get; private set; }
        public static byte Depth { get; private set; }
        public static bool IsTextMode { get; private set; }
        public static bool IsDoubleBuffered { get; private set; }
        public static VGAMode ModeID { get; private set; }

        // buffer
        public static byte* Buffer;
        private static MemoryBlock BackBuffer = new MemoryBlock(0x60000, 0x10000);

        // color palette - 8 bit
        public static uint[] Palette256 = new uint[256]
        {
            0x000000, 0x010103, 0x030306, 0x040409, 0x06060C, 0x07070F, 0x090913, 0x0B0B16, 0x0C0C19, 0x0E0E1C, 0x0F0F1F, 0x111123, 0x131326, 0x141429, 0x16162C, 0x17172F,
            0x000000, 0x010301, 0x030603, 0x040904, 0x060C06, 0x070F07, 0x091309, 0x0B160B, 0x0C190C, 0x0E1C0E, 0x0F1F0F, 0x112311, 0x132613, 0x142914, 0x162C16, 0x172F17,
            0x000000, 0x030101, 0x060303, 0x090404, 0x0C0606, 0x0F0707, 0x130909, 0x160B0B, 0x190C0C, 0x1C0E0E, 0x1F0F0F, 0x231111, 0x261313, 0x291414, 0x2C1616, 0x2F1717,
            0x000000, 0x000103, 0x000306, 0x000409, 0x00060C, 0x00070F, 0x000913, 0x000B16, 0x000C19, 0x000E1C, 0x000F1F, 0x001123, 0x001326, 0x001429, 0x00162C, 0x00172F,
            0x000000, 0x010003, 0x030006, 0x040009, 0x06000C, 0x07000F, 0x090013, 0x0B0016, 0x0C0019, 0x0E001C, 0x0F001F, 0x110023, 0x130026, 0x140029, 0x16002C, 0x17002F,
            0x000000, 0x000301, 0x000603, 0x000904, 0x000C06, 0x000F07, 0x001309, 0x00160B, 0x00190C, 0x001C0E, 0x001F0F, 0x002311, 0x002613, 0x002914, 0x002C16, 0x002F17,
            0x000000, 0x010300, 0x030600, 0x040900, 0x060C00, 0x070F00, 0x091300, 0x0B1600, 0x0C1900, 0x0E1C00, 0x0F1F00, 0x112300, 0x132600, 0x142900, 0x162C00, 0x172F00,
            0x000000, 0x030001, 0x060003, 0x090004, 0x0C0006, 0x0F0007, 0x130009, 0x16000B, 0x19000C, 0x1C000E, 0x1F000F, 0x230011, 0x260013, 0x290014, 0x2C0016, 0x2F0017,
            0x000000, 0x030100, 0x060300, 0x090400, 0x0C0600, 0x0F0700, 0x130900, 0x160B00, 0x190C00, 0x1C0E00, 0x1F0F00, 0x231100, 0x261300, 0x291400, 0x2C1600, 0x2F1700,
            0x000000, 0x030003, 0x060006, 0x090009, 0x0C000C, 0x0F000F, 0x130013, 0x160016, 0x190019, 0x1C001C, 0x1F001F, 0x230023, 0x260026, 0x290029, 0x2C002C, 0x2F002F,
            0x000000, 0x000303, 0x000606, 0x000909, 0x000C0C, 0x000F0F, 0x001313, 0x001616, 0x001919, 0x001C1C, 0x001F1F, 0x002323, 0x002626, 0x002929, 0x002C2C, 0x002F2F,
            0x000000, 0x030300, 0x060600, 0x090900, 0x0C0C00, 0x0F0F00, 0x131300, 0x161600, 0x191900, 0x1C1C00, 0x1F1F00, 0x232300, 0x262600, 0x292900, 0x2C2C00, 0x2F2F00,
            0x000000, 0x000003, 0x000006, 0x000009, 0x00000C, 0x00000F, 0x000013, 0x000016, 0x000019, 0x00001C, 0x00001F, 0x000023, 0x000026, 0x000029, 0x00002C, 0x00002F,
            0x000000, 0x000300, 0x000600, 0x000900, 0x000C00, 0x000F00, 0x001300, 0x001600, 0x001900, 0x001C00, 0x001F00, 0x002300, 0x002600, 0x002900, 0x002C00, 0x002F00,
            0x000000, 0x030000, 0x060000, 0x090000, 0x0C0000, 0x0F0000, 0x130000, 0x160000, 0x190000, 0x1C0000, 0x1F0000, 0x230000, 0x260000, 0x290000, 0x2C0000, 0x2F0000,
            0x000000, 0x030303, 0x060606, 0x090909, 0x0C0C0C, 0x0F0F0F, 0x131313, 0x161616, 0x191919, 0x1C1C1C, 0x1F1F1F, 0x232323, 0x262626, 0x292929, 0x2C2C2C, 0x2F2F2F,
        };

        // color palette - 4 bit
        public static uint[] Palette16 = new uint[16]
        { 0x000000, 0x00001F, 0x001F00, 0x001F1F, 0x1F0000, 0x1F001F, 0x2F1F00, 0x2F2F2F, 0x1F1F1F, 0x00103F, 0x003F00, 0x003F3F, 0x3F0000, 0x3F003F, 0x3F3F00, 0x3F3F3F, };

        // initialization
        public static void Initialize(VGAMode mode)
        {
            SetMode(mode);
        }

        #region Graphics Handling

        // clear screen
        public static void Clear(byte color)
        {
            uint i = 0;
            // text mode
            if (IsTextMode) { for (i = 0; i < (Width * Height) * 2; i += 2) { Buffer[i] = 0x20; Buffer[i + 1] = color; } }
            // graphics mode
            else if (!IsTextMode && !IsDoubleBuffered) { for (i = 0; i < Width * Height; i++) { Buffer[i] = color; } }
            // double buffered graphics mode
            else if (!IsTextMode && IsDoubleBuffered) { BackBuffer.Fill(color); }
        }

        // draw pixel
        public static void DrawPixel(ushort x, ushort y, byte color)
        {
            if (x >= Width || y >= Height) { return; }
            if (IsTextMode) { return; }
            uint offset = (uint)(x + (y * Width));

            // double buffered
            if (IsDoubleBuffered) { BackBuffer.Bytes[offset] = color; }
            // direct
            else { Buffer[offset] = color; }
        }

        // swap back buffer
        public static void Display()
        {
            // check mode
            if (ModeID != VGAMode.Pixel320x200DB) { return; }

            byte* src = (byte*)BackBuffer.Base;

            for (uint i = 0; i < Width * Height; i++)
            {
                if (*(Buffer + i) != *(src + i))
                {
                    *(Buffer + i) = *(src + i);
                }
            }
        }

        // set text-mode cursor position
        public static void SetCursorPos(ushort x, ushort y)
        {
            if (!IsTextMode) { return; }
            uint offset = (uint)(x + (y * Width));
            PORT_CRTC_WRITE.Byte = 14;
            PORT_CRTC_DATA.Byte = (byte)((offset & 0xFF00) >> 8);
            PORT_CRTC_WRITE.Byte = 15;
            PORT_CRTC_DATA.Byte = (byte)(offset & 0x00FF);
        }

        // enable cursor
        public static void EnableCursor(byte start, byte end)
        {
            PORT_CRTC_WRITE.Byte = 0x0A;
            PORT_CRTC_DATA.Byte = (byte)((PORT_CRTC_DATA.Byte & 0xC0) | start);
            PORT_CRTC_WRITE.Byte = 0x0B;
            PORT_CRTC_DATA.Byte = (byte)((PORT_CRTC_DATA.Byte & 0xE0) | end);
        }

        // disable cursor
        public static void DisableCursor()
        {
            PORT_CRTC_WRITE.Byte = 0x0A;
            PORT_CRTC_DATA.Byte = 0x20;
        }

        #endregion

        #region Hardware Control

        // set current video mode properties
        private static void SetModeProperties(ushort w, ushort h, byte depth, bool text, bool db)
        {
            Width = w; Height = h; Depth = depth;
            IsTextMode = text;
            IsDoubleBuffered = db;
        }

        // set current video mode
        public static void SetMode(VGAMode mode)
        {
            // set mode id
            ModeID = mode;

            // set mode
            switch (mode)
            {
                // 80x25 text mode
                case VGAMode.Text80x25:
                    {
                        SetModeProperties(80, 25, 4, true, false);
                        fixed (byte* ptr = VGAModeRegisters.Mode80x25_Text) { WriteRegisters(ptr); }
                        SetFont(VGAFontData.Font8x16_Data, 16);
                        SetColorPalette(Palette16);
                        break;
                    }
                // 80x50 text mode
                case VGAMode.Text80x50:
                    {
                        SetModeProperties(80, 50, 4, true, false);
                        fixed (byte* ptr = VGAModeRegisters.Mode80x50_Text) { WriteRegisters(ptr); }
                        SetFont(VGAFontData.Font8x8_Data, 8);
                        SetColorPalette(Palette16);
                        break;
                    }
                // 90x60 text mode
                case VGAMode.Text90x60:
                    {
                        SetModeProperties(90, 60, 4, true, false);
                        fixed (byte* ptr = VGAModeRegisters.Mode90x60_Text) { WriteRegisters(ptr); }
                        SetFont(VGAFontData.Font8x8_Data, 8);
                        SetColorPalette(Palette16);
                        break;
                    }
                // 320x200 graphics mode
                case VGAMode.Pixel320x200:
                    {
                        SetModeProperties(320, 200, 8, false, false);
                        fixed (byte* ptr = VGAModeRegisters.Mode320x200x256_Pixel) { WriteRegisters(ptr); }
                        ClearColorPalette();
                        SetColorPalette(Palette256);
                        break;
                    }
                // 320x200 double buffered graphics mode
                case VGAMode.Pixel320x200DB:
                    {
                        SetModeProperties(320, 200, 8, false, true);
                        fixed (byte* ptr = VGAModeRegisters.Mode320x200x256_Pixel) { WriteRegisters(ptr); }
                        ClearColorPalette();
                        SetColorPalette(Palette256);
                        break;
                    }
                // default to 80x25 text mode
                default: { break; }
            }

            // clear the screen
            Clear(0);
        }

        // get frame buffer segment
        private static byte* GetFrameBufferSegment()
        {
            PORT_GC_WRITE.Byte = 0x06;
            byte segNum = (byte)(PORT_GC_DATA.Byte & (3 << 2));
            switch (segNum)
            {
                default:
                case 0 << 2: return (byte*)0x00000;
                case 1 << 2: return (byte*)0xA0000;
                case 2 << 2: return (byte*)0xB0000;
                case 3 << 2: return (byte*)0xB8000;
            }
        }

        // write data to vga registers
        private static void WriteRegisters(byte* regs)
        {
            // misc
            PORT_MISC_WRITE.Byte = *(regs++);

            // sequencer
            for (byte i = 0; i < 5; i++) { PORT_SEQ_WRITE.Byte = i; PORT_SEQ_DATA.Byte = *(regs++); }

            // crtc
            PORT_CRTC_WRITE.Byte = 0x03;
            PORT_CRTC_DATA.Byte = (byte)(PORT_CRTC_DATA.Byte | 0x80);
            PORT_CRTC_WRITE.Byte = 0x11;
            PORT_CRTC_DATA.Byte = (byte)(PORT_CRTC_DATA.Byte | ~0x80);

            // registers
            regs[0x03] = (byte)(regs[0x03] | 0x80);
            regs[0x11] = (byte)(regs[0x11] & ~0x80);
            for (byte i = 0; i < 25; i++) { PORT_CRTC_WRITE.Byte = i; PORT_CRTC_DATA.Byte = *(regs++); }

            // graphics controller
            for (byte i = 0; i < 9; i++) { PORT_GC_WRITE.Byte = i; PORT_GC_DATA.Byte = *(regs++); }

            // attribute controller
            byte val = 0;
            for (byte i = 0; i < 21; i++)
            {
                val = PORT_INSTAT_READ.Byte;
                PORT_AC_WRITE.Byte = i;
                PORT_AC_WRITE.Byte = *(regs++);
            }

            val = PORT_INSTAT_READ.Byte;
            PORT_AC_WRITE.Byte = 0x20;


            // set buffer address
            Buffer = GetFrameBufferSegment();
        }

        // set plane data
        private static void SetPlane(byte ap)
        {
            // calculate
            byte pmask;
            ap &= 3;
            pmask = (byte)(1 << ap);

            // set read plane
            PORT_GC_WRITE.Byte = 4;
            PORT_GC_DATA.Byte = ap;

            // set write plane
            PORT_SEQ_WRITE.Byte = 2;
            PORT_SEQ_DATA.Byte = pmask;
        }

        // set font
        private static void SetFont(byte[] font, byte height)
        {
            byte seq2, seq4, gc4, gc5, gc6;

            // sequencer
            PORT_SEQ_WRITE.Byte = 2;
            seq2 = PORT_SEQ_DATA.Byte;
            PORT_SEQ_WRITE.Byte = 4;
            seq4 = PORT_SEQ_DATA.Byte;
            PORT_SEQ_DATA.Byte = (byte)(seq4 | 0x04);

            // gc
            PORT_GC_WRITE.Byte = 4;
            gc4 = PORT_GC_DATA.Byte;
            PORT_GC_WRITE.Byte = 5;
            gc5 = PORT_GC_DATA.Byte;
            PORT_GC_DATA.Byte = (byte)(gc5 & ~0x10);
            PORT_GC_WRITE.Byte = 6;
            gc6 = PORT_GC_DATA.Byte;
            PORT_GC_DATA.Byte = (byte)(gc6 & ~0x02);

            // write font to plane 4
            SetPlane(2);

            // write font
            byte* seg = GetFrameBufferSegment();
            for (uint i = 0; i < 256; i++)
            { for (uint j = 0; j < height; j++) { seg[(i * 32) + j] = font[(i * height) + j]; } }

            // restore registers
            PORT_SEQ_WRITE.Byte = 2;
            PORT_SEQ_DATA.Byte = seq2;
            PORT_SEQ_WRITE.Byte = 4;
            PORT_SEQ_DATA.Byte = seq4;
            PORT_GC_WRITE.Byte = 4;
            PORT_GC_DATA.Byte = gc4;
            PORT_GC_WRITE.Byte = 5;
            PORT_GC_DATA.Byte = gc5;
            PORT_GC_WRITE.Byte = 6;
            PORT_GC_DATA.Byte = gc6;
        }

        // set color palette
        public static void SetColorPalette(uint[] colors)
        {
            for (uint i = 0; i < colors.Length; i++)
            {
                if (!IsTextMode) { PORT_MASK_DATA.Byte = 0xFF; } else { PORT_MASK_DATA.Byte = 0x0F; }
                PORT_DAC_WRITE.Byte = (byte)i;
                PORT_DAC_DATA.Byte = (byte)((colors[i] & 0xFF0000) >> 16);
                PORT_DAC_DATA.Byte = (byte)((colors[i] & 0x00FF00) >> 8);
                PORT_DAC_DATA.Byte = (byte)(colors[i] & 0x0000FF);
            }
        }

        // clear color palette
        private static void ClearColorPalette()
        {
            for (uint i = 0; i < 256; i++)
            {
                if (!IsTextMode) { PORT_MASK_DATA.Byte = 0xFF; } else { PORT_MASK_DATA.Byte = 0x0F; }
                PORT_DAC_WRITE.Byte = (byte)i;
                PORT_DAC_DATA.Byte = 0;
                PORT_DAC_DATA.Byte = 0;
                PORT_DAC_DATA.Byte = 0;
            }
        }

        #endregion
    }
    #endregion

    #region Cosmos.System.Graphics
    public static class VGAGraphics
    {
        private static int fontHeight = 16;

        // clear the screen
        public static void Clear(VGAColor color) { VGADriverII.Clear((byte)color); }

        // swap back buffer if able
        public static void Display() { VGADriverII.Display(); }

        // draw pixel
        public static void DrawPixel(int x, int y, VGAColor color) { VGADriverII.DrawPixel((ushort)x, (ushort)y, (byte)color); }

        // draw filled rectangle
        public static void DrawFilledRect(int x, int y, int w, int h, VGAColor color)
        {
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++) { DrawPixel(x + j, y + i, color); }
            }
        }

        // draw horizontal line
        public static void DrawLineX(int x, int y, int w, VGAColor color)
        {
            for (int i = 0; i < w; i++) { DrawPixel(x + i, y, color); }
        }

        // draw vertical line
        public static void DrawLineY(int x, int y, int h, VGAColor color)
        {
            for (int i = 0; i < h; i++) { DrawPixel(x, y + i, color); }
        }

        // draw point-to-point line
        public static void DrawLine(int x0, int y0, int x1, int y1, VGAColor color)
        {
            // calculate
            int xx = x0, yy = y0;
            var dx = Math.Abs(x1 - x0);
            var dy = Math.Abs(y1 - y0);
            var sx = (x0 < x1) ? 1 : -1;
            var sy = (y0 < y1) ? 1 : -1;
            var err = dx - dy;

            while (true)
            {
                // draw pixel
                DrawPixel(xx, yy, color);

                // increment
                if ((x0 == x1) && (y0 == y1)) break;
                var e2 = 2 * err;
                if (e2 > -dy) { err -= dy; xx += (int)sx; }
                if (e2 < dx) { err += dx; yy += (int)sy; }
            }
        }

        // draw character with transparent background
        public static void DrawChar(int x, int y, char c, VGAColor fg, VGAFont font)
        {
            // determine font size
            fontHeight = 8;
            if (font == VGAFont.Font8x8) { fontHeight = 8; }
            else if (font == VGAFont.Font8x16) { fontHeight = 16; }
            int p = fontHeight * (byte)c;

            // vertical
            for (int cy = 0; cy < fontHeight; cy++)
            {
                // horizontal
                for (byte cx = 0; cx < 8; cx++)
                {
                    // 8x8
                    if (font == VGAFont.Font8x8)
                    {
                        // convert to position and draw
                        if (VGAFontData.ConvertByteToBitAddress(VGAFontData.Font8x8_Data[p + cy], cx + 1))
                        { DrawPixel(x + (8 - cx), y + cy, fg); }
                    }
                    // 8x16
                    else if (font == VGAFont.Font8x16)
                    {
                        // convert to position and draw
                        if (VGAFontData.ConvertByteToBitAddress(VGAFontData.Font8x16_Data[p + cy], cx + 1))
                        { DrawPixel(x + (8 - cx), y + cy, fg); }
                    }
                }
            }
        }

        // draw character with background color
        public static void DrawChar(int x, int y, char c, VGAColor fg, VGAColor bg, VGAFont font)
        {
            // determine font size
            fontHeight = 8;
            if (font == VGAFont.Font8x8) { fontHeight = 8; }
            else if (font == VGAFont.Font8x16) { fontHeight = 16; }
            int p = fontHeight * (byte)c;

            // vertical
            for (int cy = 0; cy < fontHeight; cy++)
            {
                // horizontal
                for (byte cx = 0; cx < 8; cx++)
                {
                    // 8x8
                    if (font == VGAFont.Font8x8)
                    {
                        // convert to position and draw
                        if (VGAFontData.ConvertByteToBitAddress(VGAFontData.Font8x8_Data[p + cy], cx + 1))
                        { DrawPixel(x + (8 - cx), y + cy, fg); }
                        else { DrawPixel(x + (8 - cx), y + cy, bg); }
                    }
                    // 8x16
                    else if (font == VGAFont.Font8x16)
                    {
                        // convert to position and draw
                        if (VGAFontData.ConvertByteToBitAddress(VGAFontData.Font8x16_Data[p + cy], cx + 1))
                        { DrawPixel(x + (8 - cx), y + cy, fg); }
                        else { DrawPixel(x + (8 - cx), y + cy, bg); }
                    }
                }
            }
        }

        // draw string with transparent background
        public static void DrawString(int x, int y, string text, VGAColor fg, VGAFont font)
        {
            // determine font size
            fontHeight = 8;
            if (font == VGAFont.Font8x8) { fontHeight = 8; }
            else if (font == VGAFont.Font8x16) { fontHeight = 16; }

            int xx = x, yy = y;
            for (int i = 0; i < text.Length; i++)
            {
                // new line
                if (text[i] == '\n') { xx = x; yy += fontHeight; }
                // character
                else { DrawChar(xx, yy, text[i], fg, font); xx += 8; }
            }
        }

        // draw string with background color
        public static void DrawString(int x, int y, string text, VGAColor fg, VGAColor bg, VGAFont font)
        {
            // determine font size
            fontHeight = 8;
            if (font == VGAFont.Font8x8) { fontHeight = 8; }
            else if (font == VGAFont.Font8x16) { fontHeight = 16; }

            int xx = x, yy = y;
            for (int i = 0; i < text.Length; i++)
            {
                // new line
                if (text[i] == '\n') { xx = x; yy += fontHeight; }
                // character
                else { DrawChar(xx, yy, text[i], fg, bg, font); xx += 8; }
            }
        }

        // draw custom image format
        public static void DrawImage(int x, int y, VGAImage image)
        {
            for (int yy = 0; yy < image.Height; yy++)
            {
                for (int xx = 0; xx < image.Width; xx++)
                {
                    DrawPixel(x + xx, y + yy, (VGAColor)image.Data[xx + (yy * image.Width)]);
                }
            }
        }

        // draw custom image format with transparency key
        public static void DrawImage(int x, int y, VGAColor transKey, VGAImage image)
        {
            for (int yy = 0; yy < image.Height; yy++)
            {
                for (int xx = 0; xx < image.Width; xx++)
                {
                    if (image.Data[xx + (yy * image.Width)] != (byte)transKey)
                    { DrawPixel(x + xx, y + yy, (VGAColor)image.Data[xx + (yy * image.Width)]); }
                }
            }
        }
    }
    #endregion

    #region Cosmos.System.Color
    public enum VGAColor
    {
        Black = 0,
        SlateBlue1,
        SlateBlue2,
        SlateBlue3,
        SlateBlue4,
        SlateBlue5,
        SlateBlue6,
        SlateBlue7,
        SlateBlue8,
        SlateBlue9,
        SlateBlue10,
        SlateBlue11,
        SlateBlue12,
        SlateBlue13,
        SlateBlue14,
        SlateBlue,
        Black2,
        PaleGreen1,
        PaleGreen2,
        PaleGreen3,
        PaleGreen4,
        PaleGreen5,
        PaleGreen6,
        PaleGreen7,
        PaleGreen8,
        PaleGreen9,
        PaleGreen10,
        PaleGreen11,
        PaleGreen12,
        PaleGreen13,
        PaleGreen14,
        PaleGreen,
        Black3,
        Coral1,
        Coral2,
        Coral3,
        Coral4,
        Coral5,
        Coral6,
        Coral7,
        Coral8,
        Coral9,
        Coral10,
        Coral11,
        Coral12,
        Coral13,
        Coral14,
        Coral,
        Black4,
        SkyBlue1,
        SkyBlue2,
        SkyBlue3,
        SkyBlue4,
        SkyBlue5,
        SkyBlue6,
        SkyBlue7,
        SkyBlue8,
        SkyBlue9,
        SkyBlue10,
        SkyBlue11,
        SkyBlue12,
        SkyBlue13,
        SkyBlue14,
        SkyBlue,
        Black5,
        Purple1,
        Purple2,
        Purple3,
        Purple4,
        Purple5,
        Purple6,
        Purple7,
        Purple8,
        Purple9,
        Purple10,
        Purple11,
        Purple12,
        Purple13,
        Purple14,
        Purple,
        Black6,
        Mint1,
        Mint2,
        Mint3,
        Mint4,
        Mint5,
        Mint6,
        Mint7,
        Mint8,
        Mint9,
        Mint10,
        Mint11,
        Mint12,
        Mint13,
        Mint14,
        Mint,
        Black7,
        LawnGreen1,
        LawnGreen2,
        LawnGreen3,
        LawnGreen4,
        LawnGreen5,
        LawnGreen6,
        LawnGreen7,
        LawnGreen8,
        LawnGreen9,
        LawnGreen10,
        LawnGreen11,
        LawnGreen12,
        LawnGreen13,
        LawnGreen14,
        LawnGreen,
        Black8,
        Pink1,
        Pink2,
        Pink3,
        Pink4,
        Pink5,
        Pink6,
        Pink7,
        Pink8,
        Pink9,
        Pink10,
        Pink11,
        Pink12,
        Pink13,
        Pink14,
        Pink,
        Black9,
        Orange1,
        Orange2,
        Orange3,
        Orange4,
        Orange5,
        Orange6,
        Orange7,
        Orange8,
        Orange9,
        Orange10,
        Orange11,
        Orange12,
        Orange13,
        Orange14,
        Orange,
        Black10,
        Magenta1,
        Magenta2,
        Magenta3,
        Magenta4,
        Magenta5,
        Magenta6,
        Magenta7,
        Magenta8,
        Magenta9,
        Magenta10,
        Magenta11,
        Magenta12,
        Magenta13,
        Magenta14,
        Magenta,
        Black11,
        Cyan1,
        Cyan2,
        Cyan3,
        Cyan4,
        Cyan5,
        Cyan6,
        Cyan7,
        Cyan8,
        Cyan9,
        Cyan10,
        Cyan11,
        Cyan12,
        Cyan13,
        Cyan14,
        Cyan,
        Black12,
        Yellow1,
        Yellow2,
        Yellow3,
        Yellow4,
        Yellow5,
        Yellow6,
        Yellow7,
        Yellow8,
        Yellow9,
        Yellow10,
        Yellow11,
        Yellow12,
        Yellow13,
        Yellow14,
        Yellow,
        Black13,
        Blue1,
        Blue2,
        Blue3,
        Blue4,
        Blue5,
        Blue6,
        Blue7,
        Blue8,
        Blue9,
        Blue10,
        Blue11,
        Blue12,
        Blue13,
        Blue14,
        Blue,
        Black14,
        Green1,
        Green2,
        Green3,
        Green4,
        Green5,
        Green6,
        Green7,
        Green8,
        Green9,
        Green10,
        Green11,
        Green12,
        Green13,
        Green14,
        Green,
        Black15,
        Red1,
        Red2,
        Red3,
        Red4,
        Red5,
        Red6,
        Red7,
        Red8,
        Red9,
        Red10,
        Red11,
        Red12,
        Red13,
        Red14,
        Red,
        Black16,
        Gray1,
        Gray2,
        Gray3,
        Gray4,
        Gray5,
        Gray6,
        Gray,
        Silver1,
        Silver2,
        Silver3,
        Silver4,
        Silver5,
        Silver6,
        Silver,
        White,
    }

    #endregion

    #region Cosmos.System.Font
    public enum VGAFont
    {
        Font3x5,
        Font8x8,
        Font8x16,
    }

    public static class VGAFontData
    {

        // convert byte to bit address
        public static bool ConvertByteToBitAddress(byte toConvert, int toReturn)
        {
            int mask = 1 << (toReturn - 1);
            return (toConvert & mask) != 0;
        }

        // 3x5 font data
        public static readonly byte[] Font3x5_Data = new byte[]
        {
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, // space
			0x02, 0x02, 0x02, 0x00, 0x02, // !
			0x05, 0x05, 0x00, 0x00, 0x00, // "
			0x05, 0x07, 0x05, 0x07, 0x05, // #
			0x03, 0x06, 0x03, 0x06, 0x02, // $
			0x04, 0x01, 0x02, 0x04, 0x01, // %
			0x06, 0x06, 0x07, 0x05, 0x03, // &
			0x02, 0x02, 0x00, 0x00, 0x00, // '
			0x01, 0x02, 0x02, 0x02, 0x01, // (
			0x04, 0x02, 0x02, 0x02, 0x04, // )
			0x05, 0x02, 0x05, 0x00, 0x00, // *
			0x00, 0x02, 0x07, 0x02, 0x00, // +
			0x00, 0x00, 0x00, 0x01, 0x02, // ,
			0x00, 0x00, 0x07, 0x00, 0x00, // -
			0x00, 0x00, 0x00, 0x00, 0x02, // .
			0x01, 0x01, 0x02, 0x04, 0x04, // /
			0x03, 0x05, 0x05, 0x05, 0x06, // 0
			0x02, 0x06, 0x02, 0x02, 0x02, // 1
			0x06, 0x01, 0x02, 0x04, 0x07, // 2
			0x06, 0x01, 0x02, 0x01, 0x06, // 3
			0x05, 0x05, 0x07, 0x01, 0x01, // 4
			0x07, 0x04, 0x06, 0x01, 0x06, // 5
			0x03, 0x04, 0x07, 0x05, 0x07, // 6
			0x07, 0x01, 0x02, 0x04, 0x04, // 7
			0x07, 0x05, 0x07, 0x05, 0x07, // 8
			0x07, 0x05, 0x07, 0x01, 0x06, // 9
			0x00, 0x02, 0x00, 0x02, 0x00, // :
			0x00, 0x02, 0x00, 0x02, 0x04, // ;
			0x01, 0x02, 0x04, 0x02, 0x01, // <
			0x00, 0x07, 0x00, 0x07, 0x00, // =
			0x04, 0x02, 0x01, 0x02, 0x04, // >
			0x07, 0x01, 0x02, 0x00, 0x02, // ?
			0x02, 0x05, 0x07, 0x04, 0x03, // @
			0x02, 0x05, 0x07, 0x05, 0x05, // A
			0x06, 0x05, 0x06, 0x05, 0x06, // B
			0x03, 0x04, 0x04, 0x04, 0x03, // C
			0x06, 0x05, 0x05, 0x05, 0x06, // D
			0x07, 0x04, 0x07, 0x04, 0x07, // E
			0x07, 0x04, 0x07, 0x04, 0x04, // F
			0x03, 0x04, 0x07, 0x05, 0x03, // G
			0x05, 0x05, 0x07, 0x05, 0x05, // H
			0x07, 0x02, 0x02, 0x02, 0x07, // I
			0x01, 0x01, 0x01, 0x05, 0x02, // J
			0x05, 0x05, 0x06, 0x05, 0x05, // K
			0x04, 0x04, 0x04, 0x04, 0x07, // L
			0x05, 0x07, 0x07, 0x05, 0x05, // M
			0x05, 0x07, 0x07, 0x07, 0x05, // N
			0x02, 0x05, 0x05, 0x05, 0x02, // O
			0x06, 0x05, 0x06, 0x04, 0x04, // P
			0x02, 0x05, 0x05, 0x07, 0x03, // Q
			0x06, 0x05, 0x07, 0x06, 0x05, // R
			0x03, 0x04, 0x02, 0x01, 0x06, // S
			0x07, 0x02, 0x02, 0x02, 0x02, // T
			0x05, 0x05, 0x05, 0x05, 0x03, // U
			0x05, 0x05, 0x05, 0x02, 0x02, // V
			0x05, 0x05, 0x07, 0x07, 0x05, // W
			0x05, 0x05, 0x02, 0x05, 0x05, // X
			0x05, 0x05, 0x02, 0x02, 0x02, // Y
			0x07, 0x01, 0x02, 0x04, 0x07, // Z
			0x07, 0x04, 0x04, 0x04, 0x07, // [
			0x00, 0x04, 0x02, 0x01, 0x00, // \
			0x07, 0x01, 0x01, 0x01, 0x07, // ]
			0x02, 0x05, 0x00, 0x00, 0x00, // ^
			0x00, 0x00, 0x00, 0x00, 0x07, // _
			0x04, 0x02, 0x00, 0x00, 0x00, // `
			0x00, 0x07, 0x03, 0x05, 0x07, // a
			0x04, 0x06, 0x05, 0x05, 0x06, // b
			0x00, 0x03, 0x04, 0x04, 0x03, // c
			0x01, 0x03, 0x05, 0x05, 0x03, // d
			0x00, 0x03, 0x05, 0x06, 0x03, // e
			0x01, 0x02, 0x07, 0x02, 0x02, // f
			0x03, 0x05, 0x07, 0x01, 0x02, // g
			0x04, 0x06, 0x05, 0x05, 0x05, // h
			0x02, 0x00, 0x02, 0x02, 0x02, // i
			0x01, 0x00, 0x01, 0x05, 0x02, // j
			0x04, 0x05, 0x06, 0x06, 0x05, // k
			0x06, 0x02, 0x02, 0x02, 0x07, // l
			0x00, 0x07, 0x07, 0x07, 0x05, // m
			0x00, 0x06, 0x05, 0x05, 0x05, // n
			0x00, 0x02, 0x05, 0x05, 0x02, // o
			0x00, 0x06, 0x06, 0x04, 0x04, // p
			0x00, 0x03, 0x03, 0x01, 0x01, // q
			0x00, 0x03, 0x04, 0x04, 0x04, // r
			0x00, 0x03, 0x06, 0x03, 0x06, // s
			0x02, 0x07, 0x02, 0x02, 0x03, // t
			0x00, 0x05, 0x05, 0x05, 0x03, // u
			0x00, 0x05, 0x05, 0x07, 0x02, // v
			0x00, 0x05, 0x07, 0x07, 0x07, // w
			0x00, 0x05, 0x02, 0x02, 0x05, // x
			0x00, 0x05, 0x07, 0x01, 0x02, // y
			0x00, 0x07, 0x03, 0x06, 0x07, // z
			0x03, 0x02, 0x04, 0x02, 0x03, // {
			0x02, 0x02, 0x02, 0x02, 0x02, // |
			0x06, 0x02, 0x01, 0x02, 0x06, // }
			0x03, 0x06, 0x00, 0x00, 0x00, // ~
		};

        // font memory blocks
        public static readonly byte[] Font8x8_Data = new byte[2048]
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
            0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
            0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
            0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
            0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
            0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
            0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
            0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
            0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
            0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
            0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
            0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
            0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
            0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
            0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
            0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
            0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
            0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
            0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
            0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
            0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
            0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
            0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
            0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
            0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
            0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
            0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
            0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
            0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
            0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
            0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
            0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
            0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
            0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
            0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
            0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
            0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
            0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
            0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
            0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
            0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
            0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
            0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
            0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
            0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
            0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
            0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
            0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
            0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
            0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
            0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
            0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
            0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
            0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
            0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
            0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
            0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
            0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
            0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
            0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
            0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
            0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
            0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
            0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
            0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
            0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
            0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
            0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
            0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
            0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
            0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
            0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
            0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
            0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
            0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
            0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
            0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
            0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
            0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
            0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
            0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
            0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
            0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
            0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
            0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
            0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
            0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
            0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
            0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
            0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
            0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
            0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
            0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
            0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
            0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
            0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
            0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
            0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
            0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
            0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
            0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
            0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
            0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
            0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
            0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
            0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
            0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
            0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
            0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
            0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
            0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
            0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
            0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
            0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
            0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
            0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
            0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
            0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
            0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
            0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
            0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
            0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
            0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
            0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
            0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
            0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
            0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
            0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
            0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
            0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
            0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
            0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
            0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
            0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
            0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
            0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
            0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
            0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
            0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
            0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
            0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
            0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
            0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
            0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
            0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
            0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
            0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
            0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
            0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
            0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
            0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
            0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
            0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
            0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
            0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
            0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
            0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
            0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
            0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
            0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
            0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
            0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
            0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
            0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
            0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
            0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
            0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
            0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
            0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
            0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
            0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        public static readonly byte[] Font8x16_Data = new byte[4096]
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xfe, 0xfe, 0xd6, 0xfe, 0xfe, 0xba, 0xc6, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x6c, 0xee, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x10, 0x6c, 0xee, 0x6c, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x10, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0xfe, 0x6c, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0x99, 0x99, 0x99, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x1e, 0x0e, 0x1e, 0x36, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1e, 0x1a, 0x1e, 0x18, 0x18, 0x18, 0x18, 0x78, 0xf8, 0x70, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3e, 0x36, 0x3e, 0x36, 0x36, 0x76, 0xf6, 0x66, 0x0e, 0x1e, 0x0c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0xdb, 0x7e, 0x3c, 0x66, 0x66, 0x3c, 0x7e, 0xdb, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xfc, 0xfe, 0xfc, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x0e, 0x3e, 0x7e, 0xfe, 0x7e, 0x3e, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x7c, 0xf6, 0xde, 0x7c, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0e, 0xff, 0x0e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0xfe, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x36, 0x36, 0x36, 0x36, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc0, 0x78, 0x3c, 0x06, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x66, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x38, 0x6c, 0x38, 0x30, 0x76, 0x7e, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0c, 0x0c, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x38, 0xfe, 0x38, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0x66, 0x60, 0x64, 0x7c, 0x64, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0x66, 0x60, 0x64, 0x7c, 0x64, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xce, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xcc, 0xd8, 0xf0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xee, 0xee, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xe6, 0xe6, 0xf6, 0xde, 0xce, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0x7c, 0x06, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0x70, 0x1c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0xee, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0xc6, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
            0x00, 0x18, 0x18, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1c, 0x36, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xce, 0xc6, 0xc6, 0xce, 0x76, 0x06, 0xc6, 0x7c, 0x00, 0x00,
            0x00, 0x00, 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0c, 0x0c, 0x00, 0x1c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00,
            0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xd6, 0xd6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0x7c, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x30, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xce, 0x76, 0x06, 0xc6, 0x7c, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x86, 0x0c, 0x18, 0x30, 0x62, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x6c, 0x6c, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0xc6, 0x66, 0x3c, 0x18, 0x0c, 0xcc, 0x38, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xce, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x30, 0x78, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x18, 0x0c, 0x6c, 0x38, 0x00, 0x00,
            0x00, 0x30, 0x78, 0xcc, 0x00, 0x7c, 0xc6, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xcc, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x30, 0x18, 0x0c, 0x00, 0x7c, 0xc6, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xc6, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x0c, 0x18, 0x30, 0x00, 0xfe, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x66, 0xdb, 0x1b, 0x7f, 0xd8, 0xd8, 0xdf, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xfe, 0xd8, 0xd8, 0xd8, 0xde, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x30, 0x78, 0xcc, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x30, 0x18, 0x0c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x30, 0x78, 0xcc, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xce, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x60, 0x30, 0x18, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xce, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x18, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x38, 0x6c, 0x60, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x66, 0xf6, 0x6c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3e, 0x63, 0x63, 0x30, 0x1c, 0x06, 0x63, 0x63, 0x3e, 0x00, 0x1c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x63, 0x38, 0x0e, 0x63, 0x3e, 0x00, 0x1c, 0x00, 0x00, 0x00,
            0x00, 0x0c, 0x18, 0x30, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x76, 0xdc, 0x00, 0xbc, 0x66, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x76, 0xdc, 0x00, 0xc6, 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x21, 0x1e, 0x00, 0x1e, 0x33, 0x60, 0x60, 0x67, 0x63, 0x33, 0x1d, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x42, 0x3c, 0x00, 0x3b, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x60, 0x60, 0x62, 0x66, 0x6c, 0x18, 0x30, 0x60, 0xdc, 0x36, 0x0c, 0x18, 0x3e, 0x00, 0x00,
            0x00, 0x60, 0x60, 0x62, 0x66, 0x6c, 0x18, 0x36, 0x6e, 0xde, 0x36, 0x7e, 0x06, 0x06, 0x00, 0x00,
            0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
            0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,
            0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xcc, 0xd8, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0x66, 0x62, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0xc6, 0x62, 0x30, 0x18, 0x18, 0x30, 0x62, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xcc, 0xcc, 0xcc, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfe, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3e, 0x60, 0x60, 0x3c, 0x66, 0xc6, 0xc6, 0xc6, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x06, 0x7c, 0xce, 0xde, 0xf6, 0xf6, 0x7c, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0c, 0x1e, 0x1a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x58, 0x78, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x78, 0x38, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x70, 0xd8, 0x18, 0x30, 0x60, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
    }
    #endregion


    #region Console.Button
    class Buttons
    {
        private int Index;
        private string[] Options;
        private string Prompt;

        public static void ResetColor()
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.Black;
        }

        public Buttons(string prom, string[] options)
        {
            Prompt = prom;
            Options = options;
            Index = 0;
        }

        public void Display()
        {
            Console.WriteLine(Prompt);
            for (int i = 0; i < Options.Length; i++)
            {
                string currop = Options[i];
                string prefix;

                if (i == Index)
                {
                    prefix = "->";
                }
                else
                {
                    prefix = "  ";
                }

                ResetColor();

                Console.WriteLine(prefix + currop);
            }
        }

        public int Run()
        {
            ConsoleKey keypressed;

            do
            {
                Console.Clear();
                Display();
                ConsoleKeyInfo info = Console.ReadKey(true);
                keypressed = info.Key;
                int keys;

                while ((keys = Console.Read()) < 0)
                {
                    if (keypressed == ConsoleKey.UpArrow)
                    {
                        Index--;
                        if (Index == -1)
                        {
                            Index = Options.Length - 1;
                        }
                    }
                    else if (keypressed == ConsoleKey.DownArrow)
                    {
                        Index++;
                        if (Index == Options.Length)
                        {
                            Index = 0;
                        }
                    }
                }

                /*  SelectedIndex */
            } while (keypressed != ConsoleKey.Enter);

            return Index;

        }
    }
    #endregion

    public class TouhouConsole
    {
        /*
         Project: Touhou 6 
         Platform: TerminalOS
         Plz don't use ShowASCII_GUI in ANY CLASS
         */

        public static string player;

        public static string status;
        public static void StartGame(string player_name)
        {

            if (player_name == string.Empty)
            {
                player_name = "Reimu";
                player = player_name;
            } else
            {
                player = player_name;
            }

            status = "locked";

            string[] options = { "Start", "Extra Start (beta)", "Practice Start (" + status + ")", "Replay (beta)", "Score", "Music Room (beta)", "Option", "Quit" };

            Buttons buttons = new Buttons("*****************Touhou 6: The embodiment of scarlet devil Menu*****************\n\tCopyright (C) 2002 ZUN. All right reserved.\n\tCopyright 2022 Code-dev. All right reserved.", options);

            buttons.Display();

            int index = buttons.Run();

            switch (index) { 
                case 0: //Start
                    Console.Clear();
                    ShowASCII_GUI();
                    break;
            }

            VGADriverII.Initialize(VGAMode.Pixel320x200);

            ShowASCII_GUI();
        }

        public static void ShowASCII_GUI()
        {
            VGAGraphics.Clear(VGAColor.Blue);
            VGAGraphics.DrawString(0, 0, "Welcome " + player + ", Please wait warmly...", VGAColor.LawnGreen, VGAFont.Font8x8);
            VGAGraphics.DrawLineX(320, 100, 4, VGAColor.White);
            VGAGraphics.Display();

            Sleep.SleepInMilisecond(10000);

            Console.Clear();

            return;
        }
    }
}
